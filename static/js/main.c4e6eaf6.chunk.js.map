{"version":3,"sources":["decode.js","Qr.js","App.js","index.js"],"names":["cbor","require","publicKeys","decodeEudcc","data","a","window","fetch","response","json","JSON","parse","fs","readFileSync","startsWith","substring","base45","decode","pako","inflate","decoded","pHeader","value","uHeader","payload","kid","get","kidBase64","toString","valid","eu_keys","key","subjectPk","pk","PublicKey","fromPEM","keyX","Buffer","from","keyRaw","slice","keyY","verifier","cose","sign","verify","equals","cert","issuer","countryList","getName","issuedAt","expiresAt","version","ver","givenName","nam","gn","familyName","fn","dateOfBirth","dob","split","Array","isArray","v","length","vp","mp","ma","vaccination","disease","tg","vaccineType","vaccineProduct","vaccineManufacturer","doseNumber","dn","totalDoses","sd","date","dt","country","co","is","certificateId","ci","t","tt","tr","test","testType","testName","nm","testManufacturer","testDate","sc","replace","testResult","testCenter","tc","r","recovery","firstPositiveTest","fr","validFrom","df","validUntil","du","Qr","React","useState","undefined","eudcc","setEudcc","eudccToTable","table","DateTime","fromMillis","toISODate","push","handleScan","startScan","id","map","section","i","row","j","className","Button","variant","size","onClick","href","onScan","onError","error","console","log","App","Container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4e6eaf6.chunk.js","sourcesContent":["import fs from 'fs';\nimport base45 from 'base45-js';\nimport pako from 'pako';\n//import { cbor } from 'cbor-web';\nimport cose from 'cose-js';\nimport { PublicKey } from '@fidm/x509';\nimport countryList from 'country-list';\nconst cbor = require('cbor-web');\n\nlet publicKeys = null;\n\nconst decodeEudcc = async (data) => {\n  if (!publicKeys) {\n    if (typeof window !== 'undefined') {\n      const response = await fetch('public_keys.json');\n      publicKeys = await response.json();\n    }\n    else {\n      publicKeys = JSON.parse(fs.readFileSync('public/public_keys.json'));\n    }\n  }\n\n  if (data.startsWith('HC1')) {\n    data = data.substring(3)\n    if (data.startsWith(':')) {\n       data = data.substring(1)\n    }\n  }\n\n  data = base45.decode(data);\n\n  if (data[0] === 0x78) {\n   data = pako.inflate(data)\n  }\n\n  const decoded = cbor.decode(data);\n  // console.log(decoded);\n  const pHeader = cbor.decode(decoded.value[0]);\n  const uHeader = decoded.value[1];\n  const payload = cbor.decode(decoded.value[2]);\n  // console.log(payload);\n\n  const kid = pHeader.get(4) || uHeader.get(4);\n  const kidBase64 = kid.toString('base64');\n\n  let valid = false;\n  if (kidBase64 in publicKeys.eu_keys) {\n    const key = publicKeys.eu_keys[kidBase64][0].subjectPk;\n    const pk = PublicKey.fromPEM('-----BEGIN PUBLIC KEY-----\\n' + key + '\\n-----END PUBLIC KEY-----');\n    const keyX = Buffer.from(pk.keyRaw.slice(1, 1 + 32));\n    const keyY = Buffer.from(pk.keyRaw.slice(33, 33 + 32));\n    const verifier = { 'key': { 'x': keyX, 'y': keyY,  'kid': kid } };\n\n    try {\n      const verified = await cose.sign.verify(data, verifier);\n      if (verified.equals(decoded.value[2])) {\n        valid = true;\n      }\n    }\n    catch (error) {\n    }\n  }\n\n  const cert = payload.get(-260).get(1);\n  const response = {\n    valid: valid,\n    issuer: countryList.getName(payload.get(1)),\n    issuedAt: payload.get(6),\n    expiresAt: payload.get(4),\n    version: cert.ver,\n    givenName: cert.nam.gn,\n    familyName: cert.nam.fn,\n    dateOfBirth: cert.dob.split('T')[0],\n  };\n\n  if ('v' in cert && Array.isArray(cert.v) && cert.v.length > 0) {\n    const vp = {\n      '1119349007': 'SARS-CoV-2 mRNA vaccine',\n      '1119305005': 'SARS-CoV-2 antigen vaccine',\n      'J07BX03': 'covid-19 vaccines',\n    };\n    const mp = {\n      'EU/1/20/1528': 'Comirnaty',\n      'EU/1/20/1507': 'COVID-19 Vaccine Moderna',\n      'EU/1/21/1529': 'Vaxzevria',\n      'EU/1/20/1525': 'COVID-19 Vaccine Janssen',\n    };\n    const ma = {\n      'ORG-100001699': 'AstraZeneca AB',\n      'ORG-100030215': 'Biontech Manufacturing GmbH',\n      'ORG-100001417': 'Janssen-Cilag International',\n      'ORG-100031184': 'Moderna Biotech Spain S.L.',\n      'ORG-100006270': 'Curevac AG',\n      'ORG-100013793': 'CanSino Biologics',\n      'ORG-100020693': 'China Sinopharm International Corp. - Beijing location',\n      'ORG-100010771': 'Sinopharm Weiqida Europe Pharmaceutical s.r.o. - Prague location',\n      'ORG-100024420': 'Sinopharm Zhijun (Shenzhen) Pharmaceutical Co. Ltd. - Shenzhen location',\n      'ORG-100032020': 'Novavax CZ AS',\n    };\n    response.vaccination = {\n      disease: (cert.v[0].tg === '840539006') ? 'COVID-19' : cert.v.tg,\n      vaccineType: (cert.v[0].vp in vp) ? vp[cert.v[0].vp] : cert.v[0].vp,\n      vaccineProduct: (cert.v[0].mp in mp) ? mp[cert.v[0].mp] : cert.v[0].mp,\n      vaccineManufacturer: (cert.v[0].ma in ma) ? ma[cert.v[0].ma] : cert.v[0].ma,\n      doseNumber: cert.v[0].dn,\n      totalDoses: cert.v[0].sd,\n      date: cert.v[0].dt.split('T')[0],\n      country: countryList.getName(cert.v[0].co),\n      issuer: cert.v[0].is,\n      certificateId: cert.v[0].ci,\n    };\n  }\n\n  if ('t' in cert && Array.isArray(cert.t) && cert.t.length > 0) {\n    const tt = {\n      'LP6464-4': 'Nucleic acid amplification with probe detection',\n      'LP217198-3': 'Rapid immunoassay',\n    };\n    const ma = {\n      '1833': 'AAZ-LMB, COVID-VIRO',\n      '1232': 'Abbott Rapid Diagnostics, Panbio COVID-19 Ag Rapid Test',\n      '1468': 'ACON Laboratories, Inc, Flowflex SARS-CoV-2 Antigen rapid test',\n      '1304': 'AMEDA Labordiagnostik GmbH, AMP Rapid Test SARS-CoV-2 Ag',\n      '1822': 'Anbio (Xiamen) Biotechnology Co., Ltd, Rapid COVID-19 Antigen Test(Colloidal Gold)',\n      '1815': 'Anhui Deep Blue Medical Technology Co., Ltd, COVID-19 (SARS-CoV-2) Antigen Test Kit (Colloidal Gold) - Nasal Swab',\n      '1736': 'Anhui Deep Blue Medical Technology Co., Ltd, COVID-19 (SARS-CoV-2) Antigen Test Kit(Colloidal Gold)',\n      '768': 'ArcDia International Ltd, mariPOC SARS-CoV-2',\n      '1654': 'Asan Pharmaceutical CO., LTD, Asan Easy Test COVID-19 Ag',\n      '2010': 'Atlas Link Technology Co., Ltd., NOVA Test® SARS-CoV-2 Antigen Rapid Test Kit (Colloidal Gold Immunochromatography)',\n      '1906': 'Azure Biotech Inc, COVID-19 Antigen Rapid Test Device',\n      '1870': 'Beijing Hotgen Biotech Co., Ltd, Novel Coronavirus 2019-nCoV Antigen Test (Colloidal Gold)',\n      '1331': 'Beijing Lepu Medical Technology Co., Ltd, SARS-CoV-2 Antigen Rapid Test Kit',\n      '1484': 'Beijing Wantai Biological Pharmacy Enterprise Co., Ltd, Wantai SARS-CoV-2 Ag Rapid Test (FIA)',\n      '1223': 'BIOSYNEX S.A., BIOSYNEX COVID-19 Ag BSS',\n      '1236': 'BTNX Inc, Rapid Response COVID-19 Antigen Rapid Test',\n      '1173': 'CerTest Biotec, CerTest SARS-CoV-2 Card test',\n      '1919': 'Core Technology Co., Ltd, Coretests COVID-19 Ag Test',\n      '1225': 'DDS DIAGNOSTIC, Test Rapid Covid-19 Antigen (tampon nazofaringian)',\n      '1375': 'DIALAB GmbH, DIAQUICK COVID-19 Ag Cassette',\n      '1244': 'GenBody, Inc, Genbody COVID-19 Ag Test',\n      '1253': 'GenSure Biotech Inc, GenSure COVID-19 Antigen Rapid Kit (REF: P2004)',\n      '1144': 'Green Cross Medical Science Corp., GENEDIA W COVID-19 Ag',\n      '1747': 'Guangdong Hecin Scientific, Inc., 2019-nCoV Antigen Test Kit (colloidal gold method)',\n      '1360': 'Guangdong Wesail Biotech Co., Ltd, COVID-19 Ag Test Kit',\n      '1437': 'Guangzhou Wondfo Biotech Co., Ltd, Wondfo 2019-nCoV Antigen Test (Lateral Flow Method)',\n      '1256': 'Hangzhou AllTest Biotech Co., Ltd, COVID-19 and Influenza A+B Antigen Combo Rapid Test',\n      '1363': 'Hangzhou Clongene Biotech Co., Ltd, Covid-19 Antigen Rapid Test Kit',\n      '1365': 'Hangzhou Clongene Biotech Co., Ltd, COVID-19/Influenza A+B Antigen Combo Rapid Test',\n      '1844': 'Hangzhou Immuno Biotech Co.,Ltd, Immunobio SARS-CoV-2 Antigen ANTERIOR NASAL Rapid Test Kit (minimal invasive)',\n      '1215': 'Hangzhou Laihe Biotech Co., Ltd, LYHER Novel Coronavirus (COVID-19) Antigen Test Kit(Colloidal Gold)',\n      '1392': 'Hangzhou Testsea Biotechnology Co., Ltd, COVID-19 Antigen Test Cassette',\n      '1767': 'Healgen Scientific, Coronavirus Ag Rapid Test Cassette',\n      '1263': 'Humasis, Humasis COVID-19 Ag Test',\n      '1333': 'Joinstar Biomedical Technology Co., Ltd, COVID-19 Rapid Antigen Test (Colloidal Gold)',\n      '1764': 'JOYSBIO (Tianjin) Biotechnology Co., Ltd, SARS-CoV-2 Antigen Rapid Test Kit (Colloidal Gold)',\n      '1266': 'Labnovation Technologies Inc, SARS-CoV-2 Antigen Rapid Test Kit',\n      '1267': 'LumiQuick Diagnostics Inc, QuickProfile COVID-19 Antigen Test',\n      '1268': 'LumiraDX, LumiraDx SARS-CoV-2 Ag Test',\n      '1180': 'MEDsan GmbH, MEDsan SARS-CoV-2 Antigen Rapid Test',\n      '1190': 'möLab, COVID-19 Rapid Antigen Test',\n      '1481': 'MP Biomedicals, Rapid SARS-CoV-2 Antigen Test Card',\n      '1162': 'Nal von minden GmbH, NADAL COVID-19 Ag Test',\n      '1420': 'NanoEntek, FREND COVID-19 Ag',\n      '1199': 'Oncosem Onkolojik Sistemler San. ve Tic. A.S., CAT',\n      '308': 'PCL Inc, PCL COVID19 Ag Rapid FIA',\n      '1271': 'Precision Biosensor, Inc, Exdia COVID-19 Ag',\n      '1341': 'Qingdao Hightop Biotech Co., Ltd, SARS-CoV-2 Antigen Rapid Test (Immunochromatography)',\n      '1097': 'Quidel Corporation, Sofia SARS Antigen FIA',\n      '1606': 'RapiGEN Inc, BIOCREDIT COVID-19 Ag - SARS-CoV 2 Antigen test',\n      '1604': 'Roche (SD BIOSENSOR), SARS-CoV-2 Antigen Rapid Test',\n      '1489': 'Safecare Biotech (Hangzhou) Co. Ltd, COVID-19 Antigen Rapid Test Kit (Swab)',\n      '1490': 'Safecare Biotech (Hangzhou) Co. Ltd, Multi-Respiratory Virus Antigen Test Kit(Swab)  (Influenza A+B/ COVID-19)',\n      '344': 'SD BIOSENSOR Inc, STANDARD F COVID-19 Ag FIA',\n      '345': 'SD BIOSENSOR Inc, STANDARD Q COVID-19 Ag Test',\n      '1319': 'SGA Medikal, V-Chek SARS-CoV-2 Ag Rapid Test Kit (Colloidal Gold)',\n      '2017': 'Shenzhen Ultra-Diagnostics Biotec.Co.,Ltd, SARS-CoV-2 Antigen Test Kit',\n      '1246': 'VivaChek Biotech (Hangzhou) Co., Ltd, Vivadiag SARS CoV 2 Ag Rapid Test',\n      '1763': 'Xiamen AmonMed Biotechnology Co., Ltd, COVID-19 Antigen Rapid Test Kit (Colloidal Gold)',\n      '1278': 'Xiamen Boson Biotech Co. Ltd, Rapid SARS-CoV-2 Antigen Test Card',\n      '1456': 'Xiamen Wiz Biotech Co., Ltd, SARS-CoV-2 Antigen Rapid Test',\n      '1884': 'Xiamen Wiz Biotech Co., Ltd, SARS-CoV-2 Antigen Rapid Test (Colloidal Gold)',\n      '1296': 'Zhejiang Anji Saianfu Biotech Co., Ltd, AndLucky COVID-19 Antigen Rapid Test',\n      '1295': 'Zhejiang Anji Saianfu Biotech Co., Ltd, reOpenTest COVID-19 Antigen Rapid Test',\n      '1343': 'Zhezhiang Orient Gene Biotech Co., Ltd, Coronavirus Ag Rapid Test Cassette (Swab)',\n    };\n    const tr = {\n      '260415000': 'Not detected',\n      '260373001': 'Detected',\n    };\n    response.test = {\n      disease: (cert.t[0].tg === '840539006') ? 'COVID-19' : cert.t.tg,\n      testType: (cert.t[0].tt in tt) ? tt[cert.t[0].tt] : cert.t[0].tt,\n      testName: cert.t[0].nm || '',\n      testManufacturer: (cert.t[0].ma in ma) ? ma[cert.t[0].ma] : cert.t[0].ma,\n      testDate: cert.t[0].sc.replace('T', ' ').replace('Z', '+00'),\n      testResult: (cert.t[0].tr in tr) ? tr[cert.t[0].tr] : cert.t[0].tr,\n      testCenter: cert.t[0].tc,\n      country: countryList.getName(cert.t[0].co),\n      issuer: cert.t[0].is,\n      certificateId: cert.t[0].ci,\n    };\n  }\n\n  if ('r' in cert && Array.isArray(cert.r) && cert.r.length > 0) {\n    response.recovery = {\n      disease: (cert.r[0].tg === '840539006') ? 'COVID-19' : cert.r.tg,\n      firstPositiveTest: cert.r[0].fr.split('T')[0],\n      country: countryList.getName(cert.r[0].co),\n      issuer: cert.r[0].is,\n      validFrom: cert.r[0].df.split('T')[0],\n      validUntil: cert.r[0].du.split('T')[0],\n      certificateId: cert.r[0].ci,\n    };\n  }\n\n  return response;\n};\n\nexport default decodeEudcc;\n","import React from 'react';\nimport {Button} from 'react-bootstrap';\nimport QrReader from 'react-qr-reader'\nimport { DateTime } from 'luxon';\nimport decodeEudcc from './decode.js';\n\nfunction Qr() {\n  const [eudcc, setEudcc] = React.useState(undefined);\n  \n  const eudccToTable = (data) => {\n    const table = [\n      ['Health Certificate', [\n        ['Signature', data.valid ? 'Validated' : 'Not Validated'],\n        ['Issued by', data.issuer],\n        ['Issue Date', DateTime.fromMillis(data.issuedAt * 1000).toISODate()],\n        ['Expiration', DateTime.fromMillis(data.expiresAt * 1000).toISODate()],\n        ['Certificate Version', data.version],\n      ]],\n      ['Personal Information', [\n        ['Name', `${data.givenName} ${data.familyName}`],\n        ['Date of Birth', data.dateOfBirth],\n      ]],\n    ];\n    if (data.vaccination) {\n      table.push(['Vaccination Record', [\n        ['Disease', data.vaccination.disease],\n        ['Vaccine Type', data.vaccination.vaccineType],\n        ['Product', data.vaccination.vaccineProduct],\n        ['Manufacturer', data.vaccination.vaccineManufacturer],\n        ['Dose', `${data.vaccination.doseNumber} of ${data.vaccination.totalDoses}`],\n        ['Date Given', data.vaccination.date],\n        ['Country', data.vaccination.country],\n        ['Issuer', data.vaccination.issuer],\n        ['Certificate ID', data.vaccination.certificateId],\n      ]]);\n    }\n    if (data.test) {\n      table.push(['Test Record', [\n        ['Disease', data.test.disease],\n        ['Test Type', data.test.testType],\n        ['Test Name', data.test.testName],\n        ['Test Manufacturer', data.test.testManufacturer],\n        ['Test Date', data.test.testDate],\n        ['Test Result', data.test.testResult],\n        ['Test Center', data.test.testCenter],\n        ['Country', data.test.country],\n        ['Issuer', data.test.issuer],\n        ['Certificate ID', data.test.certificateId],\n      ]]);\n    }\n    if (data.recovery) {\n      table.push(['Recovery Record', [\n        ['Disease', data.recovery.disease],\n        ['First Positive Test', data.recovery.firstPositiveTest],\n        ['Country', data.recovery.country],\n        ['Issuer', data.recovery.issuer],\n        ['Valid From', data.recovery.validFrom],\n        ['Valid Until', data.recovery.validUntil],\n        ['Certificate ID', data.recovery.certificateId],\n      ]]);\n    }\n    return table;\n  };\n\n  const handleScan = async (data) => {\n    if (data) {\n      let decoded;\n      try {\n        decoded = eudccToTable(await decodeEudcc(data));\n      }\n      catch (error) {\n        decoded = [\n          ['Could not read QR Code', [\n            ['Error', error.toString()],\n          ]],\n        ];\n      }\n      setEudcc(decoded);\n    }\n  };\n\n  const handleError = (error) => {\n    console.log(error);\n  };\n\n  const startScan = () => {\n    setEudcc(null);\n  };\n\n  return (\n    <>\n      {!eudcc ?\n        <>\n          {eudcc === undefined ?\n            <div id=\"intro\">\n              <h1>EU Digital COVID Certificate Decoder</h1>\n              <p>Scan your EUDCC QR Code to find out what information is stored inside!</p>\n              <Button variant=\"primary\" size=\"lg\" onClick={startScan} >Scan QR Code</Button>\n              <div className=\"faq\">\n                <h2>Frequently Asked Questions</h2>\n                <p>\n                  <b>Will my COVID certificate be shared or stored after I scan it?</b><br />\n                  No. This application runs entirely in your browser, no information is transmitted anywhere.\n                </p>\n                <p>\n                  <b>Is this legal? How are you able to decode my COVID certificate?</b><br />\n                  The information is stored in the QR Code, without encryption. The EU released <a href=\"https://github.com/eu-digital-green-certificates\">documentation</a> on how to extract information out of the QR Codes to allow any person or organization to develop a decoder.\n                </p>\n                <p>\n                  <b>What information does my COVID certificate has about me?</b><br />\n                  The certificate includes your name, your date of birth, and details of your vaccination, test result, or recovery from the disease.\n                </p>\n                <p>\n                  <b>How is the information in my COVID certificate verified?</b><br />\n                  Each COVID certificate includes a cryptographic signature that confirms that the information is authentic. This application will also attempt to validate the signature in your certificate.\n                </p>\n              </div>\n            </div>\n          :\n            <div id=\"qrcode\">\n              <QrReader onScan={handleScan} onError={handleError} />\n            </div>\n          }\n        </>\n      :\n        <div id=\"info\">\n          {eudcc.map((section, i) =>\n              <>\n                <h2>{section[0]}</h2>\n                <table>\n                  {section[1].map((row, j) => \n                    <>\n                      {row[0] === 'Signature' ?\n                        <tr><th>Signature</th><td><span className={row[1].replace(' ', '')}>{row[1]}</span></td></tr>\n                      :\n                        <tr key={`${i}-${j}`}><th>{row[0]}</th><td>{row[1]}</td></tr>\n                      }\n                    </>\n                  )}\n                </table>\n              </>\n          )}\n          <Button variant=\"primary\" size=\"lg\" onClick={startScan} >Scan Another QR Code</Button>\n        </div>\n      }\n    </>\n  );\n}\n\nexport default Qr;\n","import './App.css';\nimport React from 'react';\nimport { Container } from 'react-bootstrap';\nimport Qr from './Qr.js';\n\nfunction App() {\n  return (\n    <Container>\n      <div id=\"scan\"><Qr /></div>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}